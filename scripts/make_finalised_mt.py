import hail as hl
import argparse
import os

def make_argparser():
	
    parser = argparse.ArgumentParser(
        description = "A tool for generating the final annotated, soft-filtered Matrix Table"
    )

    parser.add_argument(
        "path_to_mt",
        metavar="path_to_mt",
        type=str,
        help="path to the matrix table generated by combiner"
    )
	
    parser.add_argument(
        "path_to_vqsr_ht",
        metavar="path_to_vqsr_ht",
        type=str,
        help="path to the table from VQSR"
    )

    parser.add_argument(
        "path_to_output",
        metavar="path_to_output",
        type=str,
        help="path to the final matrix table output destination"
    )

    return parser.parse_args()

def main():

    parser = make_argparser()

    hl.init(
        app_name="make_finalised_mt",
        log=os.getcwd()
    )


    # Path variables
    path_to_mt = "file://" + os.path.abspath(parser.path_to_mt)
    path_to_vqsr_ht = "file://" + os.path.abspath(parser.path_to_vqsr_ht)
    path_to_output = "file://" + os.path.abspath(parser.path_to_output)

    mt = hl.read_matrix_table(path_to_mt)

    vqsr_ht = hl.read_table(path_to_vqsr_ht)
    mt = annotate_vqsr(mt, vqsr_ht)

    for ht in [vqsr_ht]:
        mt = mt.annotate_globals(**ht.index_globals())

    mt.write(path_to_output, overwrite=True)


def annotate_vqsr(mt, vqsr_ht):
    mt = mt.annotate_rows(**vqsr_ht[mt.row_key])
    
    mt = mt.annotate_rows(info=vqsr_ht[mt.row_key].info)
    
    mt = mt.annotate_rows(
        filters=mt.filters.union(vqsr_ht[mt.row_key].filters),
    )
    
    mt = mt.annotate_globals(**vqsr_ht.index_globals())
    
    return mt





if __name__ == "__main__":
    main()